<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>